<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>